<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>